<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>